<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>